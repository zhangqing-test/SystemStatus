package com.system.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.system.common.controller.BaseController;
import com.system.entity.AffectServices;
import com.system.entity.Hardware;
import com.system.entity.Manager;
import com.system.entity.PingAndPort;
import com.system.entity.Services;
import com.system.service.IAffectServicesService;
import com.system.service.IHardwareService;
import com.system.service.IManagerService;
import com.system.service.IPingAndPortService;
import com.system.service.IServicesService;
import com.system.web.form.DatatableForm;

/**
 * 后台页面 前端控制器
 */
@Controller
public class AdminController extends BaseController {

	@Autowired
	private IHardwareService hardwareService;

	@Autowired
	private IServicesService servicesService;

	@Autowired
	private IAffectServicesService affectServicesService;

	@Autowired
	private IPingAndPortService netService;

	@Autowired
	private IManagerService managerService;

	/**
	 * 硬件入口
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/OA/hardware")
	public String hardware(HttpServletRequest request, Model model) {
		return "hardwareList";
	}

	/**
	 * 硬件list分页
	 * 
	 * @param form
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/hardware/query")
	@ResponseBody
	public String hardwareList(DatatableForm form, HttpServletRequest request, Model model) {
		Map<String, Object> result = new HashMap<String, Object>();
		String ip=request.getParameter("hIp");
		String name=request.getParameter("hName");
		String sx=request.getParameter("hSx");
		EntityWrapper<Hardware> ew = new EntityWrapper<Hardware>();
		if(!"".equals(name)){
			ew.like("name",name );
		}
		if(!"".equals(ip)){
			ew.eq("ip",ip );
		}
		if(!"".equals(sx)){
			ew.eq("fwqsx", sx);
		}
		Integer count = hardwareService.selectCount(ew);
		if (count != 0) {
			List<Hardware> list = hardwareService.paginationQuery(form,ew);
			List<List<String>> data = new ArrayList<List<String>>();
			// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd
			// HH:mm:ss");

			for (Hardware hardware : list) {
				List<String> detail = new ArrayList<String>();
				detail.add(hardware.getName());

				detail.add(hardware.getFwqsx() == 0 ? "虚拟机" : "实体机");
				detail.add(hardware.getIp());
				detail.add(hardware.getSzjip());
				detail.add(hardware.getYxxt());
				detail.add(hardware.getMac());
				
				detail.add("<button type=\"button\" onClick=\"hardwareClick(" + hardware.getId() + ")\" class=\"btn btn-outline btn-primary btn-xs\">detail</button>" );//+ "&nbsp;<button type=\"button\" onClick=\"hardwareDelete(" + hardware.getId() + ")\" class=\"btn btn-outline btn-danger btn-xs\">delete</button>");
				data.add(detail);
			}

			result.put("data", data);
		} else {
			result.put("data", "");
		}
		result.put("draw", form.getDraw());		
		result.put("recordsTotal", count);
		result.put("recordsFiltered", count);
		JSONObject jsonObject = new JSONObject(result);
		String jsonString = jsonObject.toJSONString();
		return jsonString;
	}

	/**
	 * 硬件详情
	 * 
	 * @param id
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/hardware/detail")
	public String hardwareDetail(@RequestParam("id") Integer id, Model model) {
		Hardware hardware = hardwareService.selectById(id);
		model.addAttribute("data", hardware);
		List<Integer> ids = new ArrayList<Integer>();
		ids.add(hardware.getFirstManager());
		ids.add(hardware.getSecondManager());
		if (null != hardware.getThirdManager()) {
			ids.add(hardware.getThirdManager());
		}
		List<Manager> managers = managerService.selectBatchIds(ids);
		if (null != managers) {
			for (Manager manager : managers) {
				if (manager.getId().equals(hardware.getFirstManager())) {
					model.addAttribute("one", manager);
				}
				if (manager.getId().equals(hardware.getSecondManager())) {
					model.addAttribute("two", manager);
				}
				if (manager.getId().equals(hardware.getThirdManager())) {
					model.addAttribute("three", manager);
				}
			}
		}
		return "hardwareDetail";
	}

	/**
	 * 根据id 删除hardware
	 * 
	 * @param id
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/hardware/delete")
	@ResponseBody
	public String hardwareDelete(@RequestParam("id") Integer id, HttpServletRequest request, Model model) {
		try {
			boolean flag = hardwareService.deleteById(id);
			return flag ? "success" : "false";
		} catch (Exception e) {
			return "false";
		}
	}

	/**
	 * 服务入口
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/OA/services")
	public String services(HttpServletRequest request, Model model) {
		return "servicesList";
	}

	/**
	 * 服务list分页
	 * 
	 * @param form
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/services/query")
	@ResponseBody
	public String servicesList(DatatableForm form, HttpServletRequest request, Model model) {
		Map<String, Object> result = new HashMap<String, Object>();
		String fwName=request.getParameter("fwName");
		String sfjk=request.getParameter("sfjk");
		String fwType=request.getParameter("fwType");
		EntityWrapper<Services> ew = new EntityWrapper<Services>();
		if(!"".equals(fwName)){
			ew.like("name", fwName);
		}
		if(!"".equals(sfjk)){
			ew.eq("jk", sfjk);
		}
		if(!"".equals(fwType)){
			ew.eq("type", fwType);
		}
		Integer count = servicesService.selectCount(ew);
		

		if (count != 0) {
			List<Services> list = servicesService.paginationQuery(form,ew);
			List<List<String>> data = new ArrayList<List<String>>();

			for (Services services : list) {
				List<String> detail = new ArrayList<String>();
				Hardware hardware = hardwareService.selectById(services.getHardwareId());
				detail.add(services.getName());
				detail.add(hardware.getName());
				detail.add(services.isJk() ? "是" : "否");
				detail.add(services.getType() == 1 ? "应用服务" : "数据库");
				detail.add("<button type=\"button\" onClick=\"servicesClick(" + services.getId() + ")\" class=\"btn btn-outline btn-primary btn-xs\">detail</button>");// + "&nbsp;<button type=\"button\" onClick=\"servicesDelete(" + services.getId() + ")\" class=\"btn btn-outline btn-danger btn-xs\">delete</button>");
				data.add(detail);
			}

			result.put("data", data);
		} else {
			result.put("data", "");
		}
		result.put("draw", form.getDraw());
		result.put("recordsTotal", count);
		result.put("recordsFiltered", count);
		JSONObject jsonObject = new JSONObject(result);
		String jsonString = jsonObject.toJSONString();
		return jsonString;
	}

	/**
	 * 服务详情
	 * 
	 * @param id
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/services/detail")
	public String servicesDetail(@RequestParam("id") Integer id, Model model) {
		Services services = servicesService.selectById(id);
		model.addAttribute("data", services);

		Hardware hardware = hardwareService.selectById(services.getHardwareId());
		model.addAttribute("hardware", hardware);
		model.addAttribute("jk", services.isJk());

		List<Map<String, Object>> list = servicesService.selectAffectServices(services.getId());
		model.addAttribute("affect", list);

		List<Integer> ids = new ArrayList<Integer>();
		ids.add(services.getFirstManager());
		ids.add(services.getSecondManager());
		if (null != services.getThirdManager()) {
			ids.add(services.getThirdManager());
		}
		List<Manager> managers = managerService.selectBatchIds(ids);
		if (null != managers) {
			for (Manager manager : managers) {
				if (manager.getId().equals(services.getFirstManager())) {
					model.addAttribute("one", manager);
				}
				if (manager.getId().equals(services.getSecondManager())) {
					model.addAttribute("two", manager);
				}
				if (manager.getId().equals(services.getThirdManager())) {
					model.addAttribute("three", manager);
				}
			}
		}
		return "servicesDetail";
	}

	/**
	 * 根据id 删除services
	 * 
	 * @param id
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/services/delete")
	@ResponseBody
	public String servicesDelete(@RequestParam("id") Integer id, HttpServletRequest request, Model model) {
		try {
			affectServicesService.delete(new EntityWrapper<AffectServices>().eq("services_id", id));
			boolean flag = servicesService.deleteById(id);
			return flag ? "success" : "false";
		} catch (Exception e) {
			return "false";
		}
	}

	/**
	 * 网络入口
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/OA/net")
	public String net(HttpServletRequest request, Model model) {
		return "netList";
	}

	/**
	 * 网络list分页
	 * 
	 * @param form
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/net/query")
	@ResponseBody
	public String netList(DatatableForm form, HttpServletRequest request, Model model) {
		Map<String, Object> result = new HashMap<String, Object>();
		String netName=request.getParameter("netName");
		String netIp=request.getParameter("netIp");
		String netType=request.getParameter("netType");
		EntityWrapper<PingAndPort> ew = new EntityWrapper<PingAndPort>();
		if(!"".equals(netName)){
			ew.like("ip_name", netName);
		}
		if(!"".equals(netIp)){
			ew.eq("ip", netIp);
		}
		if(!"".equals(netType)){
			ew.eq("type", netType);
		}
		Integer count = netService.selectCount(ew);
		

		if (count != 0) {
			List<PingAndPort> list = netService.paginationQuery(form,ew);
			List<List<String>> data = new ArrayList<List<String>>();

			for (PingAndPort net : list) {
				List<String> detail = new ArrayList<String>();
				detail.add(net.getNetName());
				detail.add(net.getIpName());
				detail.add(net.getIp());
				detail.add(net.getTargetIpName());
				detail.add(net.getTargetIp());
				switch (net.getType()) {
				case 1:
					detail.add("双向");
					break;
				case 2:
					detail.add("主到副");
					break;
				case 3:
					detail.add("副到主");
					break;
				default:
					break;
				}
				detail.add("<button type=\"button\" onClick=\"netClick(" + net.getId() + ")\" class=\"btn btn-outline btn-primary btn-xs\">detail</button>");// + "&nbsp;<button type=\"button\" onClick=\"netDelete(" + net.getId() + ")\" class=\"btn btn-outline btn-danger btn-xs\">delete</button>");
				data.add(detail);
			}

			result.put("data", data);
		} else {
			result.put("data", "");
		}
		result.put("draw", form.getDraw());
		result.put("recordsTotal", count);
		result.put("recordsFiltered", count);
		JSONObject jsonObject = new JSONObject(result);
		String jsonString = jsonObject.toJSONString();
		return jsonString;
	}

	/**
	 * 网络详情
	 * 
	 * @param id
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/net/detail")
	public String netDetail(@RequestParam("id") Integer id, Model model) {
		PingAndPort net = netService.selectById(id);
		model.addAttribute("data", net);

		List<Integer> ids = new ArrayList<Integer>();
		ids.add(net.getFirstManager());
		ids.add(net.getSecondManager());
		if (null != net.getThirdManager()) {
			ids.add(net.getThirdManager());
		}
		List<Manager> managers = managerService.selectBatchIds(ids);
		if (null != managers) {
			for (Manager manager : managers) {
				if (manager.getId().equals(net.getFirstManager())) {
					model.addAttribute("one", manager);
				}
				if (manager.getId().equals(net.getSecondManager())) {
					model.addAttribute("two", manager);
				}
				if (manager.getId().equals(net.getThirdManager())) {
					model.addAttribute("three", manager);
				}
			}
		}
		return "netDetail";
	}

	/**
	 * 根据id 删除net
	 * 
	 * @param id
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/OA/net/delete")
	@ResponseBody
	public String netDelete(@RequestParam("id") Integer id, HttpServletRequest request, Model model) {
		try {
			boolean flag = netService.deleteById(id);
			return flag ? "success" : "false";
		} catch (Exception e) {
			return "false";
		}
	}

}
